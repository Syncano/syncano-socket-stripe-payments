name: stripe-payments
description: Stripe offers payment solutions for businesses.
long_description: >
  This socket covers Balance, Bank Account, Charges, Customers,

  Disputes, Events, Sources and Tokens resources.

  To make calls to specific endpoints, kindly refer to
  https://stripe.com/docs/api  
version: 0.0.3
runtime: nodejs_v8
config:
  STRIPE_SECRET_KEY:
    description: >-
      Stripe Secret Key. To find the key, log into your Stripe account, navigate
      to API
    required: true
endpoints:
  balance/list-all-balance:
    private: true
    description: >-
      Returns a list of transactions that have contributed to the Stripe account
      balance.
    inputs:
      properties:
        available_on:
          type: object
          description: Optional parameters for filtering balance list.
          long_description: >
            Filters based on available_on. kindly refer to
            https://stripe.com/docs/api
          examples:
            - |
              {
                gte: 1515628800
              }
        created:
          type: object
          description: Optional parameters for filtering list based on balance created.
          long_description: >
            Filters based on balance created. kindly refer to
            https://stripe.com/docs/api
          examples:
            - |
              {
                gt: 1515628800
              }
        currency:
          type: string
          description: Optional parameters for filtering balance list.
          long_description: >
            Filters based on currency type. kindly refer to
            https://stripe.com/docs/api
          examples:
            - usd
        ending_before:
          type: string
          description: >-
            Optional parameters for filtering balance list based on
            ending_before.
          long_description: >
            A cursor for use in pagination. It defines your place in te list.

            For instance, if you make a list request and receive 100 objects,
            starting with obj_bar,

            your subsequent call can include ending_before=obj_bar in order to
            fetch the previous page of the list.

            Filters based on ending_before. kindly refer to
            https://stripe.com/docs/api
          examples:
            - obj_bar
        limit:
          type: integer
          description: Optional parameters for limiting number of objects to return.
          long_description: |
            This can range between 1 and 100 items, and the default is 10 items.
            kindly refer to https://stripe.com/docs/api
          examples:
            - 5
        payout:
          type: string
          description: Optional parameters for automatic Stripe payouts only.
          long_description: >
            Only returns transactions that were payed out on the specified
            payout ID.

            kindly refer to https://stripe.com/docs/api
          examples:
            - tr_10340J2eZvKYlo2Cg42HilbB
        source:
          type: string
          description: Optional parameters for returning the original transaction
          long_description: |
            Filters based on source. kindly refer to https://stripe.com/docs/api
          examples:
            - ch_19XJJ02eZvKYlo2CHfSUsSpl
        starting_after:
          type: string
          description: >-
            Optional parameters for filtering balance list based on
            starting_after.
          long_description: >
            A cursor for use in pagination. starting_after is an object ID that
            defines your place in the list.

            For instance, if you make a list request and receive 100 objects,
            ending with obj_foo,

            your subsequent call can include starting_after=obj_foo in order to
            fetch the next page of the list.

            kindly refer to https://stripe.com/docs/api
          examples:
            - obj_foo
        type:
          type: string
          description: >-
            Optional parameters that only returns transactions of the given
            type.
          examples:
            - charge
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
              "message": "List of Balance.",
              "statusCode": 200
              "data": {}
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "type": "StripeInvalidRequestError",
              "message": "Received unknown parameter: amount",
              "statusCode": 400
            }
  balance/retrieve-balance:
    private: true
    description: >-
      Retrieves current account balance, based on authentication used to make
      the request.
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
              "message": "Balance report.",
              "statusCode": 200
              "data": {}
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "message": "Make sure to use `GET` request method for retrieving balance."
            }
  balance/retrieve-balance-transaction:
    private: true
    description: Retrieves the balance transaction with the given ID.
    inputs:
      properties:
        transID:
          type: string
          description: ID of the desired balance transaction.
          long_description: >
            The ID of the desired balance transaction (as found on any API
            object

            that affects the balance, e.g. a charge or transfer).
          examples:
            - txn_1BYXxzJbpxha41ttgmoeelpy
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
               "message": "Balance transaction report.",
                "statusCode": 200
                "data": {}
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "type": "StripeInvalidRequestError",
              "message": "No such balance transaction: txn_1BYXxzJbpxha41ttgm",
              "statusCode": 404
            }
  charge/charges:
    private: true
    description: 'Create, Retrieve and Update actions for charges.'
    long_description: |
      This comprises of three actions for `charges` resource.
      Make sure to use `POST`, `GET` and `PUT` request method for creating,
      retrieving and updating charges respectively.
    inputs:
      properties:
        chargeParameter:
          type: object
          description: Parameters for executing creating and updating of a charge.
          long_description: >
            This is needed for creating and updating a charge.

            When creating a charge. Object must contain amount, currency and
            source.

            When updating a charge, the parameters are optional
          examples:
            - |
              {
                "chargeParameter":
                  {"currency": "usd",
                    "source": "tok_mastercard",
                    "amount": 500,
                    "capture":"false"
                  }
              }
        chargeID:
          type: string
          description: The identifier of the charge to be retrieved or updated.
          long_description: >
            Note that this is required for retrieve, update and shouldn't be
            passed for create.
          examples:
            - ch_1BYXxnJbpxha41ttAGtgztsa
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
               "message": "Charge Updated",
               "statusCode": 200,
               "data": {}
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "type": "StripeInvalidRequestError",
              "message": "Invalid hash",
              "statusCode": 400
            }
  charge/capture-charge:
    private: true
    description: 'Capture the payment of an existing, uncaptured, charge.'
    inputs:
      properties:
        chargeID:
          type: string
          description: ID of a charge.
          examples:
            - ch_1BYXxnJbpxha41ttAGtgztsa
        captureChargeParameter:
          type: object
          description: Optional parameters for capturing a charge.
          examples:
            - |
              { "amount": 500,
                "receipt_email": "test@example.com"
              }
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
               "message": "Charge Captured",
               "statusCode": 200,
               "data": {}
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "type": "StripeInvalidRequestError",
              "message": "Charge ch_1BYA0RJbpxha41ttZKjcsuTt has already been captured.",
              "statusCode": 400
            }
  charge/list-all-charges:
    private: true
    description: Returns a list of charges previously created.
    inputs:
      properties:
        customerID:
          type: string
          description: returns charges specific to this customer ID
          examples:
            - cus_BvilkNcCyAsOod
        created:
          type: object
          description: Optional parameters for filtering charge list.
          long_description: >-
            Filters based on available_on kindly refer to
            https://stripe.com/docs/api
          examples:
            - |
              {
                gt: 1515628800
              }
        ending_before:
          type: string
          description: >-
            Optional parameters for filtering balance list based on
            ending_before.
          long_description: >
            A cursor for use in pagination. It defines your place in te list.

            For instance, if you make a list request and receive 100 objects,
            starting with obj_bar,

            your subsequent call can include ending_before=obj_bar in order to
            fetch the previous page of the list.

            Filters based on ending_before. kindly refer to
            https://stripe.com/docs/api
          examples:
            - obj_bar
        limit:
          type: integer
          description: Optional parameters for limiting number of objects to return.
          long_description: |
            This can range between 1 and 100 items, and the default is 10 items.
            kindly refer to https://stripe.com/docs/api
          examples:
            - 3
        source:
          type: object
          description: Optional parameters for filtering charge.
          long_description: >-
            filters list based on the source of the charge kindly refer to
            https://stripe.com/docs/api
          examples:
            - |
              {
                object: "card"
              }
        starting_after:
          type: string
          description: >-
            Optional parameters for filtering balance list based on
            starting_after.
          long_description: >
            cursor for use in pagination. starting_after is an object ID that
            defines your place in the list.

            For instance, if you make a list request and receive 100 objects,
            ending with obj_foo,

            your subsequent call can include starting_after=obj_foo in order to
            fetch the next page of the list.

            kindly refer to https://stripe.com/docs/api
          examples:
            - obj_foo
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
               "message": "List of Charges",
               "statusCode": 200
               "data": {}
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "type": "StripeInvalidRequestError",
              "message": "Received unknown parameter: id",
              "statusCode": 400
            }
  customers/customer:
    private: true
    description: 'Create, Retrieve, Update and Delete actions for customer.'
    long_description: >
      This comprises of four actions for `customers` resource.

      Make sure to use `POST`, `GET`, `PUT` and `DELETE` request method for
      creating,

      retrieving, updating and deleting customers respectively.
    inputs:
      properties:
        customerID:
          type: string
          description: >-
            A compulsory identifier of the charge to be retrieved, updated or
            deleted.
          examples:
            - cus_BvilkNcCyAsOod
        customerParameter:
          type: object
          description: Optional Parameters for creating and updating customer.
          examples:
            - |
              {
                "customerParameter":
                  { "account_balance": 1000,
                    "description": "testing things",
                    "email": "example@example.com"
                  }
              }
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
               "message": "Customer created successfully.",
               "statusCode": 200,
               "data": {}
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "type": "StripeInvalidRequestError",
              "message": "Received unknown parameter: limit",
              "statusCode": 400
            }
  customers/list-all-customers:
    private: true
    description: Returns a list of your customers.
    inputs:
      properties:
        created:
          type: object
          description: Optional parameters for filtering customer's list.
          long_description: >-
            Filters based on available_on. kindly refer to
            https://stripe.com/docs/api
          examples:
            - |
              {
                lte: 1515628800
              }
        email:
          type: string
          description: >-
            Filters list based on customer's email. kindly refer to
            https://stripe.com/docs/api
          examples:
            - example@example.com
        ending_before:
          type: string
          description: >-
            Optional parameters for filtering balance list based on
            ending_before.
          long_description: >
            A cursor for use in pagination. It defines your place in te list.

            For instance, if you make a list request and receive 100 objects,
            starting with obj_bar,

            your subsequent call can include ending_before=obj_bar in order to
            fetch the previous page of the list.

            Filters based on ending_before. kindly refer to
            https://stripe.com/docs/api
          examples:
            - obj_bar
        limit:
          type: integer
          description: Optional parameters for limiting number of objects to return.
          long_description: |
            This can range between 1 and 100 items, and the default is 10 items.
            kindly refer to https://stripe.com/docs/api
          examples:
            - 3
        starting_after:
          type: string
          description: >-
            Optional parameters for filtering balance list based on
            starting_after.
          long_description: >
            cursor for use in pagination. starting_after is an object ID that
            defines your place in the list.

            For instance, if you make a list request and receive 100 objects,
            ending with obj_foo,

            your subsequent call can include starting_after=obj_foo in order to
            fetch the next page of the list.

            kindly refer to https://stripe.com/docs/api
          examples:
            - obj_foo
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
               "message": "List of Customers.",
               "statusCode": 200,
               "data": {}
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "type": "StripeInvalidRequestError",
              "message": "Received unknown parameter: id",
              "statusCode": 400
            }
  disputes/close-dispute:
    private: true
    description: Closes dispute for a charge.
    inputs:
      properties:
        chargeID:
          disputeID:
            type: string
            description: ID of dispute to close.
          examples:
            - dp_1BXrJvJbpxha41ttpCkU6s2D
        captureChargeParameter:
          type: object
          description: Optional parameters for capturing a charge.
          examples:
            - |
              { "amount": 500,
                "receipt_email": "test@example.com"
              }
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
               "message": "Dispute closed.",
               "statusCode": 200
               "data": {}
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "type": "StripeInvalidRequestError",
                "message": "No such dispute: dp_1BZD3gJbpxha41ttQMvPAnPz",
                "statusCode": 404
            }
  disputes/dispute:
    private: true
    description: Retrieve and Update actions for dispute.
    long_description: |
      This comprises of two actions for `disputes` resource.
      Make sure to use `GET` and `PUT` request method for 
      retrieving and updating charges respectively.
    inputs:
      properties:
        disputeID:
          type: string
          description: The identifier of the dispute to retrieve or update.
          examples:
            - dp_1BXrJvJbpxha41ttpCkU6s2D
        disputeParameter:
          type: object
          description: Should contain optional parameters for updating of dispute.
          examples:
            - |
              {
                "disputeParameter":
                  "evidence": {
                      "customer_name": "Anthony Johnson",
                      "product_description": "Comfortable cotton t-shirt",
                      "shipping_documentation": "file_1BXrK4Jbpxha41ttgNYLcslo"
                    }
              }
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
               "message": "Dispute retrieved successfully",
               "statusCode": 200,
               "data": {}
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
               "type": "StripeInvalidRequestError",
                "message": "No such dispute: dp_1BZD3gJbpxha41ttQMvPAnPz",
                "statusCode": 404
            }
  disputes/list-all-disputes:
    private: true
    description: Returns a list of all disputes.
    inputs:
      properties:
        chargeID:
          type: string
          description: ID of a charge.
          examples:
            - ch_1BYXxnJbpxha41ttAGtgztsa
        disputesParams:
          type: object
          description: >-
            Optional parameters for listing disputes. kindly refer to
            https://stripe.com/docs/api
          examples:
            - |
              {
                limit: 3
              }
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
               "message": "List of Disputes.",
               "statusCode": 200
               "data": {}
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "type": "StripeInvalidRequestError",
              "message": "Received unknown parameter: id",
              "statusCode": 400
            }
  events/list-all-events:
    private: true
    description: Returns a list of all events.
    inputs:
      properties:
        eventsParams:
          type: object
          description: >-
            Optional parameters for listing events. kindly refer to
            https://stripe.com/docs/api
          examples:
            - |
              {
                limit: 3
              }
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
               "message": "List of Events.",
               "statusCode": 200
               "data": {}
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
               "type": "StripeInvalidRequestError",
                "message": "Received unknown parameter: id",
                "statusCode": 400
            }
  events/retrieve-event:
    private: true
    description: Closes dispute for a charge.
    inputs:
      properties:
        eventID:
          type: string
          description: The identifier of the event to be retrieved.
          examples:
            - evt_1BYXxzJbpxha41tt0cH1164E
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
               "message": "Event retrieved successfully.",
               "statusCode": 200
               "data": {}
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
               "type": "StripeInvalidRequestError",
               "message": "No such event: evt_1BYXxzJbpxha41tt0cH",
               "statusCode": 404
            }
  tokens/token:
    private: true
    description: Creates a single use token that wraps the details of a credit card.
    inputs:
      properties:
        tokenID:
          type: string
          description: The ID of the desired token.
          examples:
            - tok_1BZKxVJbpxha41ttee6PDtyQ
        tokenParams:
          type: object
          description: Parameters for creating token
          long_description: >
            Parameters provided must be either a card, customer, pii data, or
            bank account to create a token.

            Reference Stripe API reference documentation.
          examples:
            - |
              {
                "tokenParams":
                  {
                    "card": {
                      "number": 4242424242424242,
                      "exp_month": 12,
                      "exp_year": 2018,
                      "cvc": 123
                    }
                  }
              }
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
                "message": "Token created successfully.",
                 "statusCode": 200
                 "data": {}
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "type": "StripeInvalidRequestError",
              "message": "You must supply either a card, customer, pii data, or bank account to create a token.",
              "statusCode": 400
            }
  bank-accounts/bank-account:
    private: true
    description: 'Create, Retrieve, Update and Delete actions for bank account.'
    long_description: >
      This comprises of four actions for `bank accounts` resource.

      Make sure to use `POST`, `GET`, `PUT` & `DELETE` request method for
      creating,

      retrieving, updating & deleting bank accounts respectively.
    inputs:
      properties:
        customerID:
          type: string
          description: >-
            A compulsory customer identifier of the bank account to be
            retrieved, updated or deleted.
          examples:
            - cus_BwTBe5lcoH6QBA
        bankAcctID:
          type: string
          description: >-
            A compulsory identifier of the bank account to be retrieved, updated
            or deleted.
          examples:
            - card_1BZKxVJbpxha41ttCbNJuOWy
        bankAcctParams:
          type: object
          description: Addition arguments for creating and updating bank account.
          examples:
            - |
              {
                "bankAcctParams":
                  {
                    "source": "tok_1BZKxVJbpxha41ttee6PDtyQ"
                  }
              }
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
               "message": "Bank Account Retrieved",
               "statusCode": 200,
               "data": {}
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "type": "StripeInvalidRequestError",
              "message": "Missing required param: source.",
              "statusCode": 400
            }
  bank-accounts/list-all-bank-accounts:
    private: true
    description: Returns a list of the bank accounts belonging to a Customer.
    inputs:
      properties:
        customerID:
          type: string
          description: The ID of the customer whose bank accounts will be retrieved.
          examples:
            - cus_BwTBe5lcoH6QBA
        limit:
          type: integer
          description: Optional parameters for limiting number of objects to return.
          long_description: |
            This can range between 1 and 100 items, and the default is 10 items.
            kindly refer to https://stripe.com/docs/api
          examples:
            - 3
        ending_before:
          type: string
          description: >-
            Optional parameters for filtering balance list based on
            ending_before.
          long_description: >
            A cursor for use in pagination. It defines your place in te list.

            For instance, if you make a list request and receive 100 objects,
            starting with obj_bar,

            your subsequent call can include ending_before=obj_bar in order to
            fetch the previous page of the list.

            Filters based on ending_before. kindly refer to
            https://stripe.com/docs/api
          examples:
            - obj_bar
        starting_after:
          type: string
          description: >-
            Optional parameters for filtering balance list based on
            starting_after.
          long_description: >
            cursor for use in pagination. starting_after is an object ID that
            defines your place in the list.

            For instance, if you make a list request and receive 100 objects,
            ending with obj_foo,

            your subsequent call can include starting_after=obj_foo in order to
            fetch the next page of the list.

            kindly refer to https://stripe.com/docs/api
          examples:
            - obj_foo
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
               "message": "List of Bank Accounts.",
               "statusCode": 200,
               "data": {}
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "type": "StripeInvalidRequestError",
              "message": "Received unknown parameter: limi",
              "statusCode": 400
            }
  bank-accounts/verify-bank-accounts:
    private: true
    description: >-
      Verifies the customer's bank account. This only works with real bank
      account information.
    inputs:
      properties:
        customerID:
          type: string
          description: The ID of the customer whose bank accounts will be verified.
          examples:
            - cus_BwTBe5lcoH6QBA
        bankAcctID:
          type: string
          description: The ID of the source to be verified.
          examples:
            - ba_1BZD3aJbpxha41ttq4aQGcL5
        bankAcctParams:
          type: object
          description: >-
            Optional parameters for verifying bank accounts. kindly refer to
            https://stripe.com/docs/api
          examples:
            - |
              {
                "bankAcctParams": {
                  "amounts": [32, 45]
                }
              }
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
                "message": "Bank Account Retrieved.",
                 "statusCode": 200
                 "data": {}
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "type": "StripeInvalidRequestError",
              "message": "The payment source card_1BZLlzJbpxha41ttuQ1XGBpE does not require validation.",
              "statusCode": 400
            }
  cards/card:
    private: true
    description: 'Create, Retrieve, Update and Delete actions for cards.'
    long_description: >
      This comprises of four actions for `customers` resource.

      Make sure to use `POST`, `GET`, `PUT` and `DELETE` request method for
      creating,

      retrieving, updating and deleting customers respectively.
    inputs:
      properties:
        cardID:
          type: string
          description: 'A compulsory card identifier of to be retrieved, updated or deleted'
          examples:
            - card_1BZmhWJbpxha41tt0owIItGH
        customerID:
          type: string
          description: >-
            A compulsory customer identifier of the card to be retrieved,
            updated or deleted.
          examples:
            - cus_BvilkNcCyAsOod
        cardParams:
          type: object
          description: Parameters for creating and updating customer.
          long_description: |
            When creating a card. Object must contain source.
            When updating a card, the parameters are optional
          examples:
            - |
              {
                "cardParams": {
                  "source": "tok_1BZmhWJbpxha41ttGBMAJQIM"
                }
              }
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
                "message": "Card created.",
                "statusCode": 200,
                "data": {}
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "type": "StripeInvalidRequestError",
              "message": "You cannot use a Stripe token more than once: tok_1BZLlzJbpxha41ttSWMzMbjE.",
              "statusCode": 400
            }
  cards/list-all-cards:
    private: true
    description: Creates a single use token that wraps the details of a credit card.
    inputs:
      properties:
        customerID:
          type: string
          description: The ID of the customer whose cards will be listed.
          examples:
            - cus_BvilkNcCyAsOod
        limit:
          type: integer
          description: Optional parameters for limiting number of objects to return.
          long_description: |
            This can range between 1 and 100 items, and the default is 10 items.
            kindly refer to https://stripe.com/docs/api
          examples:
            - 3
        starting_after:
          type: string
          description: >-
            Optional parameters for filtering balance list based on
            starting_after.
          long_description: >
            cursor for use in pagination. starting_after is an object ID that
            defines your place in the list.

            For instance, if you make a list request and receive 100 objects,
            ending with obj_foo,

            your subsequent call can include starting_after=obj_foo in order to
            fetch the next page of the list.

            kindly refer to https://stripe.com/docs/api
          examples:
            - obj_foo
        ending_before:
          type: string
          description: Optional parameters for filtering balance list.
          long_description: >
            A cursor for use in pagination. It defines your place in te list.

            For instance, if you make a list request and receive 100 objects,
            starting with obj_bar,

            your subsequent call can include ending_before=obj_bar in order to
            fetch the previous page of the list.

            Filters based on ending_before. kindly refer to
            https://stripe.com/docs/api
          examples:
            - obj_bar
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
              "message": "List of Cards.",
              "statusCode": 200,
              "data": {}
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "type": "StripeInvalidRequestError",
              "message": "No such customer: cus_BwTBe5lcoH6BA",
              "statusCode": 400
            }
  sources/attach-source:
    private: true
    description: Attaches a Source object to a Customer.
    inputs:
      properties:
        customerID:
          type: string
          description: >-
            Compulsory parameter for customer's identification. kindly refer to
            https://stripe.com/docs/api
          examples:
            - cus_BwTBe5lcoH6QBA
        sourceParameter:
          type: object
          description: The identifier of the source to be attached
          examples:
            - |
              {
                source: src_1BaB1JJbpxha41ttLYR2i93n
              }
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
              "message": "Source Attached.",
              "statusCode": 200,
              "data": {}
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "type": "StripeInvalidRequestError",
              "message": "The source you provided cannot be attached to the customer. It must be chargeable or pending.",
              "statusCode": 400
            }
  sources/detach-source:
    private: true
    description: Detaches a Source object from a Customer.
    inputs:
      properties:
        customerID:
          type: string
          description: >-
            Compulsory parameter for customer's identification. kindly refer to
            https://stripe.com/docs/api
          examples:
            - cus_BwTBe5lcoH6QBA
        sourceID:
          type: string
          description: The ID of the desired source to detach.
          examples:
            - src_1BaB1JJbpxha41ttLYR2i93n
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
               "message": "Source Detached.",
               "statusCode": 200
               "data": {}
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "type": "StripeInvalidRequestError",
              "message": "No such source: [object Object]",
              "statusCode": 404
            }
  sources/source:
    private: true
    description: 'Create, Retrieve and Update actions for sources.'
    long_description: |
      This comprises of three actions for `charges` resource.
      Make sure to use `POST`, `GET` and `PUT` request method for creating,
      retrieving and updating sources respectively.
    inputs:
      properties:
        sourceParameter:
          type: object
          description: Parameters for executing creating and updating of source.
          long_description: |
            This is needed for creating and updating a charge.
            When creating a source. Object must contain type.
            When updating a charge, the parameters are optional
          examples:
            - |
              {
                "sourceParameter":
                  {
                    "type": "bitcoin",
                    "amount": 1000,
                    "currency": "usd",
                    "owner":
                      {
                        "email": "jenny.rosen@example.com"
                      }
                  }
              }
        sourceID:
          type: string
          description: The identifier of the source to be retrieved or updated.
          examples:
            - src_1BZnTOJbpxha41ttWPB6EFQS
        clientSecret:
          type: object
          description: The client secret of the source.
          examples:
            - |
              {
                "client_secret": "src_client_secret_BxivTwjZdpjwpqXaCWG9F0rf"
              }
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
               "message": "Source Retrieved",
               "statusCode": 200,
               "data": {}
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "type": "StripeInvalidRequestError",
              "message": "No such source: src_1BZnTOJbpxha41ttWPB6EFS",
              "statusCode": 400
            }
